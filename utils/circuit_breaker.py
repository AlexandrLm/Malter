"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ Circuit Breaker –ø–∞—Ç—Ç–µ—Ä–Ω–∞.

Circuit Breaker –∑–∞—â–∏—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏.
–¢—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: CLOSED (–Ω–æ—Ä–º–∞), OPEN (—Å–±–æ–π, –∑–∞–ø—Ä–æ—Å—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è), HALF_OPEN (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è).
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Callable, Any, TypeVar, Generic
from functools import wraps
from enum import Enum

logger = logging.getLogger(__name__)

T = TypeVar('T')


class CircuitState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker."""
    CLOSED = "CLOSED"        # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN = "OPEN"            # –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—Ä–æ—Å—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è
    HALF_OPEN = "HALF_OPEN"  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è


class CircuitBreakerError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ –∫–æ–≥–¥–∞ circuit breaker –æ—Ç–∫—Ä—ã—Ç."""
    pass


class CircuitBreaker(Generic[T]):
    """
    Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —Å–±–æ–µ–≤.
    
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
        cb = CircuitBreaker(
            name="gemini_api",
            failure_threshold=5,
            recovery_timeout=60,
            expected_exception=APIError
        )
        
        @cb.call
        async def risky_operation():
            ...
    """
    
    def __init__(
        self,
        name: str,
        failure_threshold: int = 5,
        recovery_timeout: int = 60,
        expected_exception: type[Exception] = Exception,
        success_threshold: int = 2,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Circuit Breaker.
        
        Args:
            name: –ò–º—è circuit breaker –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            failure_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±–æ–µ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è circuit
            recovery_timeout: –í—Ä–µ–º—è (—Å–µ–∫) –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            expected_exception: –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–±–æ–µ–º
            success_threshold: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—Ö–æ–≤ –≤ HALF_OPEN –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è circuit
        """
        self.name = name
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.expected_exception = expected_exception
        self.success_threshold = success_threshold
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.success_count = 0
        self.last_failure_time: datetime | None = None
        self.last_attempt_time: datetime | None = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_calls = 0
        self.total_failures = 0
        self.total_successes = 0
        self.total_blocked = 0
    
    def _should_attempt_reset(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ä–∞ –ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        if self.state != CircuitState.OPEN:
            return False
        
        if not self.last_failure_time:
            return True
        
        time_since_failure = (datetime.now() - self.last_failure_time).total_seconds()
        return time_since_failure >= self.recovery_timeout
    
    def _on_success(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤."""
        self.total_successes += 1
        self.failure_count = 0
        
        if self.state == CircuitState.HALF_OPEN:
            self.success_count += 1
            logger.info(
                f"üü° {self.name} Circuit Breaker: HALF_OPEN —É—Å–ø–µ—Ö "
                f"{self.success_count}/{self.success_threshold}"
            )
            
            if self.success_count >= self.success_threshold:
                self._close_circuit()
        elif self.state == CircuitState.CLOSED:
            # –£–∂–µ –∑–∞–∫—Ä—ã—Ç, –≤—Å–µ —Ö–æ—Ä–æ—à–æ
            pass
    
    def _on_failure(self, exception: Exception):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–π –≤—ã–∑–æ–≤."""
        self.total_failures += 1
        self.failure_count += 1
        self.last_failure_time = datetime.now()
        
        if self.state == CircuitState.HALF_OPEN:
            # –í HALF_OPEN –¥–∞–∂–µ –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ OPEN
            self._open_circuit()
            logger.warning(
                f"üî¥ {self.name} Circuit Breaker: HALF_OPEN ‚Üí OPEN (—Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω)"
            )
        elif self.state == CircuitState.CLOSED:
            if self.failure_count >= self.failure_threshold:
                self._open_circuit()
                logger.error(
                    f"üî¥ {self.name} Circuit Breaker: CLOSED ‚Üí OPEN "
                    f"(–ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥: {self.failure_count} —Å–±–æ–µ–≤)"
                )
            else:
                logger.warning(
                    f"‚ö†Ô∏è {self.name} Circuit Breaker: —Å–±–æ–π "
                    f"{self.failure_count}/{self.failure_threshold} - {exception}"
                )
    
    def _open_circuit(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç circuit (–±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã)."""
        self.state = CircuitState.OPEN
        self.success_count = 0
    
    def _close_circuit(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç circuit (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É)."""
        self.state = CircuitState.CLOSED
        self.failure_count = 0
        self.success_count = 0
        logger.info(f"‚úÖ {self.name} Circuit Breaker: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (CLOSED)")
    
    def _half_open_circuit(self):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.state = CircuitState.HALF_OPEN
        self.success_count = 0
        logger.info(f"üü° {self.name} Circuit Breaker: —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (HALF_OPEN)")
    
    def call(self, func: Callable[..., T]) -> Callable[..., T]:
        """
        –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ circuit breaker.
        
        Args:
            func: Async —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã
            
        Returns:
            –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        """
        @wraps(func)
        async def wrapper(*args, **kwargs) -> T:
            self.total_calls += 1
            self.last_attempt_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ circuit
            if self.state == CircuitState.OPEN:
                if self._should_attempt_reset():
                    self._half_open_circuit()
                else:
                    self.total_blocked += 1
                    raise CircuitBreakerError(
                        f"{self.name} Circuit Breaker –æ—Ç–∫—Ä—ã—Ç. "
                        f"–ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {self.recovery_timeout}s"
                    )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
            try:
                result = await func(*args, **kwargs)
                self._on_success()
                return result
            except self.expected_exception as e:
                self._on_failure(e)
                raise
            except Exception as e:
                # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - –Ω–µ —Å—á–∏—Ç–∞–µ–º —Å–±–æ–µ–º circuit breaker
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ {self.name}: {e}")
                raise
        
        return wrapper
    
    def get_state(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        return self.state.value
    
    def get_stats(self) -> dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã circuit breaker.
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (state, failure_count, total_calls, etc.)
        """
        return {
            "name": self.name,
            "state": self.state.value,
            "failure_count": self.failure_count,
            "success_count": self.success_count,
            "total_calls": self.total_calls,
            "total_successes": self.total_successes,
            "total_failures": self.total_failures,
            "total_blocked": self.total_blocked,
            "failure_threshold": self.failure_threshold,
            "recovery_timeout": self.recovery_timeout,
            "last_failure_time": self.last_failure_time.isoformat() if self.last_failure_time else None,
            "last_attempt_time": self.last_attempt_time.isoformat() if self.last_attempt_time else None,
            "time_until_retry": self._time_until_retry() if self.state == CircuitState.OPEN else None
        }
    
    def _time_until_retry(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)."""
        if not self.last_failure_time:
            return 0
        
        time_since_failure = (datetime.now() - self.last_failure_time).total_seconds()
        remaining = max(0, self.recovery_timeout - time_since_failure)
        return int(remaining)
    
    def reset(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å circuit breaker (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/–∞–¥–º–∏–Ω–∫–∏)."""
        logger.info(f"üîÑ {self.name} Circuit Breaker: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å")
        self._close_circuit()
        self.last_failure_time = None
        self.last_attempt_time = None


# –ì–æ—Ç–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
gemini_circuit_breaker = CircuitBreaker(
    name="Gemini API",
    failure_threshold=5,      # 5 —Å–±–æ–µ–≤ –ø–æ–¥—Ä—è–¥
    recovery_timeout=60,      # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    expected_exception=Exception,  # –õ–æ–≤–∏–º –≤—Å–µ –æ—à–∏–±–∫–∏ API
    success_threshold=2       # 2 —É—Å–ø–µ—Ö–∞ –≤ HALF_OPEN –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
)


def get_all_circuit_breakers() -> list[CircuitBreaker]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö circuit breakers –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    return [
        gemini_circuit_breaker,
        # –î–æ–±–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã–µ circuit breakers –∑–¥–µ—Å—å
    ]
