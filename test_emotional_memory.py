"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_emotional_memory.py
"""

import asyncio
import logging
from server.database import save_emotional_memory, get_emotional_memories

logging.basicConfig(level=logging.INFO)

async def test_emotional_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    
    test_user_id = 999999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    print("\n" + "="*60)
    print("üß† –¢–µ—Å—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏")
    print("="*60 + "\n")
    
    # 1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π
    print("üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–º–æ—Ü–∏–π...")
    
    test_emotions = [
        {"emotion": "happy", "intensity": 9, "context": "–ø–æ–ª—É—á–∏–ª –ø–æ–≤—ã—à–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ"},
        {"emotion": "sad", "intensity": 7, "context": "–ø–æ—Å—Å–æ—Ä–∏–ª—Å—è —Å –¥—Ä—É–≥–æ–º"},
        {"emotion": "excited", "intensity": 10, "context": "—É–∑–Ω–∞–ª —á—Ç–æ –µ–¥—É –≤ –æ—Ç–ø—É—Å–∫"},
        {"emotion": "anxious", "intensity": 6, "context": "–ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞"},
        {"emotion": "grateful", "intensity": 8, "context": "–¥—Ä—É–≥ –ø–æ–º–æ–≥ —Å –ø–µ—Ä–µ–µ–∑–¥–æ–º"}
    ]
    
    for emo in test_emotions:
        result = await save_emotional_memory(
            test_user_id,
            emotion=emo["emotion"],
            intensity=emo["intensity"],
            context=emo["context"]
        )
        if result["status"] == "success":
            print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {emo['emotion']} (intensity: {emo['intensity']})")
        elif result["status"] == "skipped":
            print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç): {emo['emotion']}")
        else:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {emo['emotion']}")
    
    print()
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
    print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    memories = await get_emotional_memories(test_user_id, limit=5)
    
    if not memories:
        print("  ‚ùå –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(memories)} —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:\n")
        for i, mem in enumerate(memories, 1):
            print(f"  {i}. {mem['emotion'].upper()} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {mem['intensity']}/10)")
            print(f"     –ö–æ–Ω—Ç–µ–∫—Å—Ç: {mem['context']}")
            print(f"     –í—Ä–µ–º—è: {mem['timestamp']}")
            print()
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    print("üí¨ –§–æ—Ä–º–∞—Ç –¥–ª—è injection –≤ –ø—Ä–æ–º–ø—Ç:")
    print("-" * 60)
    if memories:
        emotions_text = "üß† –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (–≤–∞–∂–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):\n"
        for mem in memories[:3]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-3
            emotions_text += f"- {mem['emotion']} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {mem['intensity']}/10): {mem['context']} ({mem['timestamp']})\n"
        emotions_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —ç–º–ø–∞—Ç–∏–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."
        print(emotions_text)
    print("-" * 60)
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
    print("üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è production —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   –∏ –ø—Ä–æ–≤–µ—Ä—å, –∫–∞–∫ AI –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é save_emotional_memory –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n")

if __name__ == "__main__":
    asyncio.run(test_emotional_memory())
