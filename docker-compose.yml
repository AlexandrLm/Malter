services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    volumes:
      - .env:/app/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    ports:
      - "8000:8000"
    command:
      - gunicorn
      - -w
      - "4"
      - -k
      - uvicorn.workers.UvicornWorker
      - main:app
      - --bind
      - 0.0.0.0:8000
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    volumes:
      - .env:/app/.env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    command: ["python", "-m", "bot"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  migration:
    build:
      context: .
      dockerfile: Dockerfile.migration
    env_file:
      - .env
    depends_on:
      db:
        # Миграции начнутся только после того, как база данных будет готова
        condition: service_healthy
    working_dir: /app

  redis:
    image: redis:7.2.5-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    
  db:
    image: postgres:15.7-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data: