# bot.py

import asyncio
import logging
import signal
import sys

import httpx
from aiogram import BaseMiddleware, Bot, Dispatcher, types
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio.client import Redis

from config import TELEGRAM_TOKEN, REDIS_HOST, REDIS_PORT, REDIS_DB, HTTPX_TIMEOUT, HTTPX_CONNECT_TIMEOUT
from bot.handlers import router

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è graceful shutdown
shutdown_event = asyncio.Event()

def signal_handler(signum, frame):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM –∏ SIGINT –¥–ª—è graceful shutdown.
    
    Args:
        signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
        frame: –¢–µ–∫—É—â–∏–π stack frame
    """
    signal_name = signal.Signals(signum).name
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} ({signum}). –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    shutdown_event.set()

async def main():
    bot = Bot(token=TELEGRAM_TOKEN)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Redis
    redis = Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB)
    storage = RedisStorage(redis=redis)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    dp = Dispatcher(storage=storage)

    class HttpClientMiddleware(BaseMiddleware):
        def __init__(self, client: httpx.AsyncClient):
            self.client = client

        async def __call__(
            self,
            handler,
            event: types.TelegramObject,
            data: dict,
        ) -> types.TelegramObject:
            data["client"] = self.client
            return await handler(event, data)

    class ErrorMiddleware(BaseMiddleware):
        """
        Middleware to handle exceptions in handlers globally.
        Logs errors and sends user-friendly responses.
        """
        async def __call__(
            self,
            handler,
            event: types.TelegramObject,
            data: dict,
        ) -> types.TelegramObject:
            try:
                return await handler(event, data)
            except Exception as e:
                logging.error(f"Error in handler for {event.from_user.id if hasattr(event, 'from_user') else 'unknown'}: {e}", exc_info=True)
                
                if hasattr(event, 'answer'):
                    if isinstance(e, (httpx.RequestError, httpx.HTTPStatusError)):
                        await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                
                raise  # Re-raise to prevent silent failures

    dp.update.middleware(ErrorMiddleware())

    dp.include_router(router)

    await bot.delete_webhook(drop_pending_updates=True)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    logging.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM –∏ SIGINT –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º async context manager –¥–ª—è httpx –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    async with httpx.AsyncClient(timeout=httpx.Timeout(HTTPX_TIMEOUT, connect=HTTPX_CONNECT_TIMEOUT)) as client:
        # –î–æ–±–∞–≤–ª—è–µ–º middleware —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        dp.update.middleware(HttpClientMiddleware(client))
        
        try:
            logging.debug("–ó–∞–ø—É—Å–∫ polling...")
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É polling
            polling_task = asyncio.create_task(dp.start_polling(bot))
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –æ–∂–∏–¥–∞–Ω–∏—è shutdown —Å–∏–≥–Ω–∞–ª–∞
            shutdown_task = asyncio.create_task(shutdown_event.wait())
            
            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [polling_task, shutdown_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω shutdown —Å–∏–≥–Ω–∞–ª
            if shutdown_task in done:
                logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling gracefully
                await dp.stop_polling()
                
                # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å 10 —Å–µ–∫)
                try:
                    await asyncio.wait_for(polling_task, timeout=10.0)
                    logging.debug("–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                except asyncio.TimeoutError:
                    logging.warning("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (10s)")
                    polling_task.cancel()
                    try:
                        await polling_task
                    except asyncio.CancelledError:
                        pass
            
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main loop: {e}", exc_info=True)
        finally:
            # Cleanup resources
            logging.debug("–ù–∞—á–∏–Ω–∞–µ–º cleanup —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            try:
                await bot.session.close()
                logging.debug("Bot session –∑–∞–∫—Ä—ã—Ç–∞")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot session: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º storage
            if storage:
                try:
                    await storage.close()
                    logging.debug("Redis storage –∑–∞–∫—Ä—ã—Ç")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ storage: {e}")
            
            logging.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Goodbye! üëã")
