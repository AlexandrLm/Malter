# bot.py

import asyncio
import logging
import platform
import signal
import sys
from typing import Any, Awaitable, Callable, Dict

import httpx
from aiogram import BaseMiddleware, Bot, Dispatcher, types
from aiogram.fsm.storage.redis import RedisStorage
from redis.asyncio.client import Redis

from config import HTTPX_CONNECT_TIMEOUT, HTTPX_TIMEOUT, REDIS_DB, REDIS_HOST, REDIS_PORT, TELEGRAM_TOKEN
from bot.handlers import router

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è graceful shutdown
shutdown_event = asyncio.Event()

def signal_handler(signum: int, frame: Any) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM –∏ SIGINT –¥–ª—è graceful shutdown.
    
    Args:
        signum: –ù–æ–º–µ—Ä —Å–∏–≥–Ω–∞–ª–∞
        frame: –¢–µ–∫—É—â–∏–π stack frame
    """
    try:
        signal_name = signal.Signals(signum).name
    except (ValueError, AttributeError):
        signal_name = str(signum)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name} ({signum}). –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...")
    shutdown_event.set()

class HttpClientMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    
    def __init__(self, client: httpx.AsyncClient) -> None:
        super().__init__()
        self.client = client

    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        data["client"] = self.client
        return await handler(event, data)


class ErrorMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö.
    –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        try:
            return await handler(event, data)
        except Exception as e:
            user_id = event.from_user.id if hasattr(event, 'from_user') else 'unknown'
            logger.error(f"Error in handler for user {user_id}: {e}", exc_info=True)
            
            if hasattr(event, 'answer'):
                if isinstance(e, (httpx.RequestError, httpx.HTTPStatusError)):
                    await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
            raise


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    bot = Bot(token=TELEGRAM_TOKEN)
    redis: Redis | None = None
    storage: RedisStorage | None = None
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Redis
        redis = Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB)
        storage = RedisStorage(redis=redis)

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        dp = Dispatcher(storage=storage)
        
        dp.update.middleware(ErrorMiddleware())
        dp.include_router(router)

        await bot.delete_webhook(drop_pending_updates=True)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        # –ù–∞ Windows SIGTERM –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ—ç—Ç–æ–º—É —Ç–æ–ª—å–∫–æ SIGINT
        signal.signal(signal.SIGINT, signal_handler)
        
        # SIGTERM —Ç–æ–ª—å–∫–æ –¥–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        if platform.system() != 'Windows':
            signal.signal(signal.SIGTERM, signal_handler)
            logger.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGTERM –∏ SIGINT –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            logger.debug("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ SIGINT –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (Windows)")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º async context manager –¥–ª—è httpx –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        async with httpx.AsyncClient(
            timeout=httpx.Timeout(HTTPX_TIMEOUT, connect=HTTPX_CONNECT_TIMEOUT)
        ) as client:
            # –î–æ–±–∞–≤–ª—è–µ–º middleware —Å –∫–ª–∏–µ–Ω—Ç–æ–º
            dp.update.middleware(HttpClientMiddleware(client))
            
            try:
                logger.debug("–ó–∞–ø—É—Å–∫ polling...")
                
                # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É polling
                polling_task = asyncio.create_task(dp.start_polling(bot))
                
                # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –æ–∂–∏–¥–∞–Ω–∏—è shutdown —Å–∏–≥–Ω–∞–ª–∞
                shutdown_task = asyncio.create_task(shutdown_event.wait())
                
                # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –∑–∞–¥–∞—á
                done, pending = await asyncio.wait(
                    [polling_task, shutdown_task],
                    return_when=asyncio.FIRST_COMPLETED
                )
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω shutdown —Å–∏–≥–Ω–∞–ª
                if shutdown_task in done:
                    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling gracefully
                    await dp.stop_polling()
                    
                    # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å 10 —Å–µ–∫)
                    try:
                        await asyncio.wait_for(polling_task, timeout=10.0)
                        logger.debug("–í—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    except asyncio.TimeoutError:
                        logger.warning("–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (10s)")
                        polling_task.cancel()
                        try:
                            await polling_task
                        except asyncio.CancelledError:
                            pass
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main loop: {e}", exc_info=True)
                raise
            
    finally:
        # Cleanup resources
        logger.debug("–ù–∞—á–∏–Ω–∞–µ–º cleanup —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            await bot.session.close()
            logger.debug("Bot session –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ bot session: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º storage
        if storage:
            try:
                await storage.close()
                logger.debug("Redis storage –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ storage: {e}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if redis:
            try:
                await redis.close()
                logger.debug("Redis connection –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis connection: {e}")
        
        logger.info("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Goodbye! üëã")
