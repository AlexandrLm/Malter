import asyncio
import logging
from datetime import datetime
from typing import Optional, Tuple

import httpx
from aiogram import F, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from config import DAILY_MESSAGE_LIMIT
from ..services.api_client import get_token, make_api_request
from .keyboards import get_profile_keyboard
from .profile import ProfileStates

router = Router()
logger = logging.getLogger(__name__)

# Admin user IDs (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config)
ADMIN_USER_IDS = set()  # –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤


def calculate_relationship_progress(level: int, score: int) -> Tuple[int, float, str]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π.
    
    Args:
        level: –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        score: –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏
        
    Returns:
        tuple: (max_score, progress, progress_bar)
    """
    max_score = level * 100
    progress = score / max_score if max_score > 0 else 0
    bar_length = 10
    filled = int(progress * bar_length)
    bar = '‚ñà' * filled + '‚ñë' * (bar_length - filled)
    return max_score, progress, bar

@router.message(CommandStart())
async def command_start(message: types.Message, state: FSMContext, client: httpx.AsyncClient) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/{user_id}", user_id=user_id)
    data = response.json()
    if data is not None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π. –Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª. –£–∂–µ —É—Å–ø–µ–ª–∞ —Å–æ—Å–∫—É—á–∏—Ç—å—Å—è.")
        await state.clear()
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(ProfileStates.name)

@router.message(Command("reset"))
async def command_reset(message: types.Message, state: FSMContext, client: httpx.AsyncClient) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = message.from_user.id
    await make_api_request(client, "delete", f"/profile/{user_id}", user_id=user_id)
    await message.answer("–•–º, —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞? –•–æ—Ä–æ—à–æ...")
    await asyncio.sleep(1)
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(ProfileStates.name)

@router.message(Command("status"))
async def command_status(message: types.Message, client: httpx.AsyncClient) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/status/{user_id}", user_id=user_id)
    data = response.json()
    
    if not data:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start.")
        return
    
    plan = data.get('subscription_plan', 'free')
    expires = data.get('subscription_expires')
    count = data.get('daily_message_count', 0)
    limit = DAILY_MESSAGE_LIMIT
    
    status_text = "*–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
    
    if plan == 'premium' and expires:
        try:
            exp_date = datetime.fromisoformat(expires.replace('Z', '+00:00'))
            days_left = (exp_date - datetime.now()).days
            
            status_text += "‚ú® *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n"
            status_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.split('T')[0]}\n"
            status_text += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {max(0, days_left)}\n\n"
            status_text += "üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n"
            status_text += "‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏–π ‚úÖ\n"
            status_text += "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å ‚úÖ\n"
            status_text += "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚úÖ\n"
            status_text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º ‚úÖ"
            
            if days_left <= 7:
                status_text += "\n\n‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç! –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π."
        except Exception as e:
            logger.error(f"Error parsing subscription expiry date for user {user_id}: {e}")
            status_text += "‚ú® *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n"
            status_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.split('T')[0]}\n"
            status_text += "Unlimited —Å–æ–æ–±—â–µ–Ω–∏–π ‚úÖ"
    else:
        status_text += "üÜì *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω*\n"
        status_text += f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {count}/{limit}\n"
        status_text += f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, limit - count)}\n\n"
        
        if count >= limit * 0.8:
            status_text += f"‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {count}/{limit} —Å–æ–æ–±—â–µ–Ω–∏–π!\n"
        
        status_text += "üíé *–ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á–∞–µ—Ç:*\n"
        status_text += "‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        status_text += "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å\n"
        status_text += "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        status_text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
        status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_premium –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
    
    await message.answer(status_text, parse_mode='Markdown')

@router.message(Command("premium"))
async def command_premium(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /premium - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–µ."""
    premium_info = (
        "‚ú® *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI* ‚ú®\n\n"
        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è!\n\n"
        "*–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
        f"‚Ä¢ Unlimited –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å)\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π (8-14)\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "*–°–∫–∏–¥–∫–∏ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:*\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü: 990‚ÇΩ\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞: 2490‚ÇΩ (-16%)\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: 3990‚ÇΩ (-33%)\n"
        "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤: 6990‚ÇΩ (-41%)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_premium –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
    )
    await message.answer(premium_info, parse_mode='Markdown')
@router.message(Command("test_premium"))
async def test_premium_command(message: types.Message, client: httpx.AsyncClient) -> None:
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π.
    –¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í!
    """
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if ADMIN_USER_IDS and user_id not in ADMIN_USER_IDS:
        logger.warning(f"Unauthorized test_premium attempt from user {user_id}")
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        token = await get_token(client, user_id)
        
        response = await make_api_request(
            client,
            "post",
            "/activate_premium",
            user_id=user_id,
            token=token,
            json={"user_id": user_id, "duration_days": 30}
        )
        
        await message.answer(
            "üéâ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
            "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º."
        )
        logger.info(f"Test premium activated for user {user_id}")
    except Exception as e:
        logger.error(f"Error activating test premium for user {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.")


@router.message(Command("profile"))
async def command_profile(message: types.Message, client: httpx.AsyncClient) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/{user_id}", user_id=user_id)
    data = response.json()
    
    if not data:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    name = data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    level = data.get('relationship_level', 1)
    score = data.get('relationship_score', 0)
    
    max_score, progress, bar = calculate_relationship_progress(level, score)
    
    profile_text = (
        "üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìç –ì–æ—Ä–æ–¥: {data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data.get('timezone', 'UTC')}\n\n"
        "‚ù§Ô∏è *–û—Ç–Ω–æ—à–µ–Ω–∏—è*\n"
        f"–£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"–û—á–∫–∏: {score}\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ: {bar} ({score}/{max_score})"
    )
    
    await message.answer(profile_text, parse_mode='Markdown', reply_markup=get_profile_keyboard())
@router.callback_query(F.data == "back_to_chat")
async def back_to_chat_callback(callback: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ —á–∞—Ç'."""
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ —á–∞—Ç! üòä")


@router.callback_query(F.data == "show_progress")
async def show_progress_callback(callback: types.CallbackQuery, client: httpx.AsyncClient) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π'."""
    user_id = callback.from_user.id
    response = await make_api_request(client, "get", f"/profile/{user_id}", user_id=user_id)
    data = response.json()
    
    if not data:
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    level = data.get('relationship_level', 1)
    score = data.get('relationship_score', 0)
    max_score = level * 100
    progress = score / max_score if max_score > 0 else 0
    bar_length = 20
    filled = int(progress * bar_length)
    bar = '‚ù§Ô∏è' * filled + 'üñ§' * (bar_length - filled)
    
    progress_text = (
        "üìä *–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π*\n\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"–ù–∞–∫–æ–ø–ª–µ–Ω–æ –æ—á–∫–æ–≤: {score}\n"
        f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {max_score - score} –æ—á–∫–æ–≤\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å:\n{bar}\n"
        f"({int(progress * 100)}%)"
    )
    
    await callback.message.edit_text(progress_text, parse_mode='Markdown')
    await callback.answer()