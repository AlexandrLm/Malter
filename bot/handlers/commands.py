import asyncio
import logging
import httpx
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from config import DAILY_MESSAGE_LIMIT
from ..services.api_client import make_api_request, handle_api_errors
from .profile import ProfileStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
@handle_api_errors
async def command_start(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/{user_id}")
    if response.status_code == 200 and response.json() is not None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π. –Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª. –£–∂–µ —É—Å–ø–µ–ª–∞ —Å–æ—Å–∫—É—á–∏—Ç—å—Å—è.")
        await state.clear()
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(ProfileStates.name)

@router.message(Command("reset"))
@handle_api_errors
async def command_reset(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    user_id = message.from_user.id
    await make_api_request(client, "delete", f"/profile/{user_id}")
    await message.answer("–•–º, —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞? –•–æ—Ä–æ—à–æ...")
    await asyncio.sleep(1)
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(ProfileStates.name)

@router.message(Command("status"))
@handle_api_errors
async def command_status(message: types.Message, client: httpx.AsyncClient):
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/status/{user_id}")
    if response.status_code == 200:
        data = response.json()
        if data:
            plan = data['subscription_plan']
            expires = data['subscription_expires']
            count = data['daily_message_count']
            limit = DAILY_MESSAGE_LIMIT
            
            status_text = f"–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ: *{plan.capitalize()}\n"
            if plan == 'premium' and expires:
                status_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.split('T')[0]}\n"
            elif plan == 'free':
                status_text += f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {count}/{limit}\n"
                status_text += "–ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
            
            await message.answer(status_text, parse_mode='Markdown')
        else:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@router.message(Command("premium"))
async def command_premium(message: types.Message):
    premium_info = (
        "‚ú® *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI* ‚ú®\n\n"
        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è!\n\n"
        f" Unlimited –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å).\n"
        " üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –ø–∞–º—è—Ç—å (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤).\n"
        " üì∑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n"
        " üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞.\n"
        " üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
        "–°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await message.answer(premium_info, parse_mode='Markdown')