import asyncio
import logging
import httpx
from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from config import DAILY_MESSAGE_LIMIT
from datetime import datetime
from ..services.api_client import make_api_request, handle_api_errors
from .profile import ProfileStates

router = Router()
logger = logging.getLogger(__name__)

@router.message(CommandStart())
@handle_api_errors
async def command_start(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/{user_id}", user_id=user_id)
    data = response.json()
    if data is not None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π. –Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª. –£–∂–µ —É—Å–ø–µ–ª–∞ —Å–æ—Å–∫—É—á–∏—Ç—å—Å—è.")
        await state.clear()
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(ProfileStates.name)

@router.message(Command("reset"))
@handle_api_errors
async def command_reset(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    user_id = message.from_user.id
    await make_api_request(client, "delete", f"/profile/{user_id}", user_id=user_id)
    await message.answer("–•–º, —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞? –•–æ—Ä–æ—à–æ...")
    await asyncio.sleep(1)
    await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await state.set_state(ProfileStates.name)

@router.message(Command("status"))
@handle_api_errors
async def command_status(message: types.Message, client: httpx.AsyncClient):
    user_id = message.from_user.id
    response = await make_api_request(client, "get", f"/profile/status/{user_id}", user_id=user_id)
    data = response.json()
    if data:
        plan = data['subscription_plan']
        expires = data['subscription_expires']
        count = data['daily_message_count']
        limit = DAILY_MESSAGE_LIMIT
        
        status_text = f" *–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
        
        if plan == 'premium' and expires:
            try:
                exp_date = datetime.fromisoformat(expires.replace('Z', '+00:00'))
                days_left = (exp_date - datetime.now()).days
                
                status_text += f"‚ú® *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n"
                status_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.split('T')[0]}\n"
                status_text += f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {max(0, days_left)}\n\n"
                status_text += f"üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*\n"
                status_text += f"‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏–π ‚úÖ\n"
                status_text += f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å ‚úÖ\n"
                status_text += f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚úÖ\n"
                status_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º ‚úÖ"
                
                if days_left <= 7:
                    status_text += f"\n\n‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç! –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–π."
                    
            except Exception as e:
                status_text += f"‚ú® *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞*\n"
                status_text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.split('T')[0]}\n"
                status_text += f"Unlimited —Å–æ–æ–±—â–µ–Ω–∏–π ‚úÖ"
        else:
            status_text += f"üÜì *–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω*\n"
            status_text += f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {count}/{limit}\n"
            status_text += f"–û—Å—Ç–∞–ª–æ—Å—å: {max(0, limit - count)}\n\n"
            
            if count >= limit * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
                status_text += f"‚ö†Ô∏è –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {count}/{limit} —Å–æ–æ–±—â–µ–Ω–∏–π!\n"
            
            status_text += f"üíé *–ü—Ä–µ–º–∏—É–º –≤–∫–ª—é—á–∞–µ—Ç:*\n"
            status_text += f"‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            status_text += f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å\n"
            status_text += f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            status_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
            status_text += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_premium –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
        
        await message.answer(status_text, parse_mode='MarkdownV2')
    else:
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start.")

@router.message(Command("premium"))
async def command_premium(message: types.Message):
    premium_info = (
        "‚ú® *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI* ‚ú®\n\n"
        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è!\n\n"
        " *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
        f"‚Ä¢ Unlimited –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å)\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å –∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π (8-14)\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        " *–°–∫–∏–¥–∫–∏ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:*\n"
        "‚Ä¢ 1 –º–µ—Å—è—Ü: 990‚ÇΩ\n"
        "‚Ä¢ 3 –º–µ—Å—è—Ü–∞: 2490‚ÇΩ (-16%)\n"
        "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: 3990‚ÇΩ (-33%)\n"
        "‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤: 6990‚ÇΩ (-41%)\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy_premium –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
    )
    await message.answer(premium_info, parse_mode='MarkdownV2')
@router.message(Command("test_premium"))
@handle_api_errors
async def test_premium_command(message: types.Message, client: httpx.AsyncClient):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    response = await make_api_request(
        client,
        "post",
        "/activate_premium",
        json={"user_id": user_id, "duration_days": 30}
    )
    
    await message.answer("üéâ –¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–µ–º–∏—É–º.")