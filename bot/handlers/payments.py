import logging
from datetime import datetime, timedelta
from aiogram import Router, types, F
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from config import PAYMENT_PROVIDER_TOKEN
from ..services.api_client import make_api_request, handle_api_errors

router = Router()
logger = logging.getLogger(__name__)

# –¶–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
SUBSCRIPTION_PRICES = {
    "1_month": 99000,    # 990 —Ä—É–±–ª–µ–π
    "3_months": 249000,  # 2490 —Ä—É–±–ª–µ–π (—Å–∫–∏–¥–∫–∞ ~16%)
    "6_months": 399000,  # 3990 —Ä—É–±–ª–µ–π (—Å–∫–∏–¥–∫–∞ ~33%)
    "12_months": 699000  # 6990 —Ä—É–±–ª–µ–π (—Å–∫–∏–¥–∫–∞ ~41%)
}

@router.message(Command("buy_premium"))
@handle_api_errors
async def buy_premium_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not PAYMENT_PROVIDER_TOKEN:
        await message.answer("üí≥ –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 990‚ÇΩ", callback_data="buy_1_month"),
            types.InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 2490‚ÇΩ", callback_data="buy_3_months")
        ],
        [
            types.InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 3990‚ÇΩ", callback_data="buy_6_months"),
            types.InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ - 6990‚ÇΩ", callback_data="buy_12_months")
        ],
        [
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
        ]
    ])
    
    premium_info = (
        "üíé *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
        "‚ú® *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
        "‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "üéÅ *–°–∫–∏–¥–∫–∏ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!*"
    )
    
    await message.answer(premium_info, reply_markup=keyboard, parse_mode='Markdown')

@router.callback_query(F.data.startswith("buy_"))
async def handle_subscription_choice(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not PAYMENT_PROVIDER_TOKEN:
        await callback.answer("–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
        return
    
    subscription_type = callback.data.replace("buy_", "")
    duration_days = {
        "1_month": 30,
        "3_months": 90,
        "6_months": 180,
        "12_months": 365
    }
    
    price = SUBSCRIPTION_PRICES[subscription_type]
    days = duration_days[subscription_type]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI –Ω–∞ {days} –¥–Ω–µ–π"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    await callback.bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI",
        description=description,
        payload=f"premium_{subscription_type}_{callback.from_user.id}",
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label=f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ ({days} –¥–Ω–µ–π)", amount=price)],
        start_parameter="premium_subscription",
        photo_url="https://via.placeholder.com/400x200/6C5CE7/FFFFFF?text=Premium+EvolveAI",
        photo_width=400,
        photo_height=200
    )
    
    await callback.answer()

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"""
    await callback.message.edit_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()

@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
    logger.info(f"Pre-checkout query from user {pre_checkout_query.from_user.id}: {pre_checkout_query.invoice_payload}")
    await pre_checkout_query.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    user_id = message.from_user.id
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ payload
        payload_parts = payment.invoice_payload.split("_")
        subscription_type = payload_parts[1] + "_" + payload_parts[2]  # "1_month", "3_months", etc.
        
        duration_days = {
            "1_month": 30,
            "3_months": 90,
            "6_months": 180,
            "12_months": 365
        }
        
        days = duration_days[subscription_type]
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API
        response = await make_api_request(
            message.bot.get("httpx_client"),
            "post",
            "/activate_premium",
            json={"user_id": user_id, "duration_days": days}
        )
        
        if response.status_code == 200:
            success_message = (
                f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                f"‚ú® –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!\n\n"
                f"üíé –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å:\n"
                f"‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å\n"
                f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è"
            )
            
            await message.answer(success_message, parse_mode='Markdown')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–∫—É–ø–∫—É
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–∞ {days} –¥–Ω–µ–π")
            
        else:
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + payment.telegram_payment_charge_id
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + payment.telegram_payment_charge_id
        )