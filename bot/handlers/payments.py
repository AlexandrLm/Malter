import logging
import httpx
from aiogram import Router, types, F
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import PAYMENT_PROVIDER_TOKEN
from ..services.api_client import make_api_request, handle_api_errors
from collections import defaultdict
from datetime import datetime, timedelta

router = Router()
logger = logging.getLogger(__name__)

# –¶–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)
SUBSCRIPTION_PRICES = {
    "1_month": 99000,    # 990 —Ä—É–±–ª–µ–π
    "3_months": 249000,  # 2490 —Ä—É–±–ª–µ–π (—Å–∫–∏–¥–∫–∞ ~16%)
    "6_months": 399000,  # 3990 —Ä—É–±–ª–µ–π (—Å–∫–∏–¥–∫–∞ ~33%)
    "12_months": 699000  # 6990 —Ä—É–±–ª–µ–π (—Å–∫–∏–¥–∫–∞ ~41%)
}

# FSM States –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
class PaymentStates(StatesGroup):
    choosing_plan = State()
    pending_payment = State()

# Rate limiting –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
payment_attempts = defaultdict(list)  # user_id: [timestamp1, timestamp2, ...]
MAX_PAYMENT_ATTEMPTS = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –≤ —á–∞—Å
PAYMENT_RATE_LIMIT_HOURS = 1

def check_payment_rate_limit(user_id: int) -> tuple[bool, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        tuple: (allowed: bool, remaining_attempts: int)
    """
    now = datetime.now()
    time_window = timedelta(hours=PAYMENT_RATE_LIMIT_HOURS)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    payment_attempts[user_id] = [
        t for t in payment_attempts[user_id]
        if now - t < time_window
    ]
    
    current_attempts = len(payment_attempts[user_id])
    remaining = MAX_PAYMENT_ATTEMPTS - current_attempts
    
    return (remaining > 0, remaining)


def record_payment_attempt(user_id: int):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞."""
    payment_attempts[user_id].append(datetime.now())


@router.message(Command("buy_premium"))
async def buy_premium_command(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å rate limiting"""
    user_id = message.from_user.id
    
    if not PAYMENT_PROVIDER_TOKEN:
        await message.answer("üí≥ –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    allowed, remaining = check_payment_rate_limit(user_id)
    if not allowed:
        logger.warning(f"Payment rate limit exceeded for user {user_id}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–ª–∞—Ç—ã.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {PAYMENT_RATE_LIMIT_HOURS} —á–∞—Å(–∞)."
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(PaymentStates.choosing_plan)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 990‚ÇΩ", callback_data="buy_1_month"),
            types.InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 2490‚ÇΩ", callback_data="buy_3_months")
        ],
        [
            types.InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤ - 3990‚ÇΩ", callback_data="buy_6_months"),
            types.InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤ - 6990‚ÇΩ", callback_data="buy_12_months")
        ],
        [
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")
        ]
    ])
    
    premium_info = (
        "üíé *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
        "‚ú® *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
        "‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò\n"
        "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
        "üéÅ *–°–∫–∏–¥–∫–∏ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É!*"
    )
    
    await message.answer(premium_info, reply_markup=keyboard, parse_mode='MarkdownV2')

@router.callback_query(F.data.startswith("buy_"))
async def handle_subscription_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    user_id = callback.from_user.id
    
    if not PAYMENT_PROVIDER_TOKEN:
        await callback.answer("–ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state != PaymentStates.choosing_plan:
        logger.warning(f"Invalid state for payment callback from user {user_id}: {current_state}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /buy_premium", show_alert=True)
        return
    
    subscription_type = callback.data.replace("buy_", "")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è subscription_type
    valid_types = ["1_month", "3_months", "6_months", "12_months"]
    if subscription_type not in valid_types:
        logger.error(f"Invalid subscription type from user {user_id}: {subscription_type}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return
    
    duration_days = {
        "1_month": 30,
        "3_months": 90,
        "6_months": 180,
        "12_months": 365
    }
    
    price = SUBSCRIPTION_PRICES[subscription_type]
    days = duration_days[subscription_type]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞
    record_payment_attempt(user_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await state.set_state(PaymentStates.pending_payment)
    await state.update_data(subscription_type=subscription_type, price=price, days=days)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI –Ω–∞ {days} –¥–Ω–µ–π"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    try:
        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI",
            description=description,
            payload=f"premium_{subscription_type}_{user_id}",
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=[LabeledPrice(label=f"–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ ({days} –¥–Ω–µ–π)", amount=price)],
            start_parameter="premium_subscription",
            photo_url="https://via.placeholder.com/400x200/6C5CE7/FFFFFF?text=Premium+EvolveAI",
            photo_width=400,
            photo_height=200
        )
        
        logger.info(f"Invoice created for user {user_id}: {subscription_type}, {price} RUB")
        await callback.answer()
    except Exception as e:
        logger.error(f"Error creating invoice for user {user_id}: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        await state.clear()

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"""
    await state.clear()
    await callback.message.edit_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.answer()
    logger.info(f"Payment cancelled by user {callback.from_user.id}")

@router.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout_query: PreCheckoutQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π payload.
    –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–æ –µ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è.
    """
    user_id = pre_checkout_query.from_user.id
    payload = pre_checkout_query.invoice_payload
    
    logger.info(f"Pre-checkout query from user {user_id}: {payload}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ payload
    try:
        parts = payload.split("_")
        if len(parts) != 3:
            raise ValueError(f"Invalid payload format: expected 3 parts, got {len(parts)}")
        
        prefix, subscription_type, user_id_from_payload = parts
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if prefix != "premium":
            raise ValueError(f"Invalid payload prefix: {prefix}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ subscription type
        valid_types = ["1month", "3months", "6months", "12months"]
        if subscription_type not in valid_types:
            raise ValueError(f"Invalid subscription type: {subscription_type}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ user_id
        user_id_from_payload = int(user_id_from_payload)
        if user_id_from_payload != user_id:
            logger.warning(
                f"SECURITY: Payload user_id mismatch! "
                f"Authenticated: {user_id}, Payload: {user_id_from_payload}"
            )
            await pre_checkout_query.answer(
                ok=False,
                error_message="–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã (–∑–∞—â–∏—Ç–∞ –æ—Ç –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π)
        expected_price = SUBSCRIPTION_PRICES.get(subscription_type.replace("month", "_month"))
        if expected_price and pre_checkout_query.total_amount != expected_price:
            logger.error(
                f"SECURITY: Price mismatch for user {user_id}! "
                f"Expected: {expected_price}, Got: {pre_checkout_query.total_amount}"
            )
            await pre_checkout_query.answer(
                ok=False,
                error_message="–û—à–∏–±–∫–∞: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã"
            )
            return
        
        # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        logger.info(f"Pre-checkout validation passed for user {user_id}")
        await pre_checkout_query.answer(ok=True)
        
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid payment payload from user {user_id}: {payload}, error: {e}")
        await pre_checkout_query.answer(
            ok=False,
            error_message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–Ω–≤–æ–π—Å."
        )
    except Exception as e:
        logger.error(f"Unexpected error in pre_checkout for user {user_id}: {e}", exc_info=True)
        await pre_checkout_query.answer(
            ok=False,
            error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@router.message(F.successful_payment)
async def successful_payment_handler(message: types.Message, client: httpx.AsyncClient, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    payment = message.successful_payment
    user_id = message.from_user.id
    
    # AUDIT LOG: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    logger.info(
        f"PAYMENT_SUCCESS: user_id={user_id}, "
        f"amount={payment.total_amount}, "
        f"currency={payment.currency}, "
        f"charge_id={payment.telegram_payment_charge_id}, "
        f"payload={payment.invoice_payload}, "
        f"provider_charge_id={payment.provider_payment_charge_id}"
    )
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ payload
    try:
        payload_parts = payment.invoice_payload.split("_", 2)
        subscription_type = payload_parts[1]  # "1_month", "3_months", etc.
    except Exception as e:
        logger.error(f"Failed to parse payload for user {user_id}: {payment.invoice_payload}, error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. "
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}"
        )
        await state.clear()
        return
    
    duration_days = {
        "1_month": 30,
        "3_months": 90,
        "6_months": 180,
        "12_months": 365
    }
    
    days = duration_days.get(subscription_type)
    if not days:
        logger.error(f"Invalid subscription type in successful payment: {subscription_type}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. "
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}"
        )
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ API
        from ..services.api_client import get_token
        token = await get_token(client, user_id)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ API —Å JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        response = await make_api_request(
            client,
            "post",
            "/activate_premium",
            user_id=user_id,
            token=token,
            json={
                "user_id": user_id,
                "duration_days": days,
                "charge_id": payment.telegram_payment_charge_id
            }
        )
        
        if response.status_code == 200:
            success_message = (
                f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n"
                f"‚ú® –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π!\n\n"
                f"üíé –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å:\n"
                f"‚Ä¢ Unlimited —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–∞–º—è—Ç—å\n"
                f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–Ω—ã–º —É—Ä–æ–≤–Ω—è–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! ‚ù§Ô∏è"
            )
            
            await message.answer(success_message, parse_mode='MarkdownV2')
            
            # AUDIT LOG: –£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
            logger.info(f"Premium activated successfully for user {user_id}, duration: {days} days")
            
            # –û—á–∏—â–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        else:
            # AUDIT LOG: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            logger.error(
                f"Premium activation failed for user {user_id}: "
                f"status={response.status_code}, response={response.text}"
            )
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. "
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}"
            )
            
    except Exception as e:
        # AUDIT LOG: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        logger.error(
            f"Critical error processing payment for user {user_id}: {e}, "
            f"charge_id={payment.telegram_payment_charge_id}",
            exc_info=True
        )
        await message.answer(
            "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. "
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment.telegram_payment_charge_id}"
        )
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        await state.clear()