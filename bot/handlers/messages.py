import json
import logging
from typing import Optional

import httpx
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from ..services.api_client import get_token, make_api_request
from ..services.image_processor import process_image
from ..services.response_handler import send_response

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text | F.photo)
async def handle_message(message: types.Message, state: FSMContext, client: httpx.AsyncClient) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        client: HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ —è –≤—Å–µ –≤—Å–ø–æ–º–Ω—é...")
        return

    user_id = message.from_user.id
    image_data_b64: Optional[str] = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    image_data_b64 = await process_image(message)

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ)
    text = message.text or message.caption or ""

    # –ü–æ–ª—É—á–∞–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token = await get_token(client, user_id)
    
    payload = {
        "message": text,
        "timestamp": message.date.isoformat(),
        "image_data": image_data_b64
    }

    try:
        response = await make_api_request(
            client,
            "post",
            "/chat",
            user_id=user_id,
            token=token,
            json=payload,
            timeout=180.0
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
        response.raise_for_status()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º JSON
        try:
            data = response.json()
        except json.JSONDecodeError:
            logger.error(f"Invalid JSON from API for user {user_id}: {response.text[:200]}")
            await message.answer("–û–π, —É –º–µ–Ω—è –≥–æ–ª–æ–≤–∞ –∫—Ä—É–≥–æ–º... üòµ –ù–∞–ø–∏—à–∏ —á—É—Ç—å –ø–æ–∑–∂–µ?")
            return

        await send_response(message, data)

    except httpx.HTTPStatusError as e:
        logger.error(f"API HTTP error for user {user_id}: {e.response.status_code} - {e.response.text[:200]}")
        if e.response.status_code == 429:
            await message.answer("–ü–æ—Ö–æ–∂–µ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å—Ä–∞–∑—É üòÖ –î–∞–≤–∞–π –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥–æ—Ö–Ω—ë–º?")
        elif e.response.status_code >= 500:
            await message.answer("–ü—Ä–æ—Å—Ç–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞ –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ... üòî –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ?")
        else:
            await message.answer("–£–ø—Å, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞... ü§î –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑?")
    except httpx.TimeoutException:
        logger.error(f"API timeout for user {user_id}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –¥—É–º–∞–ª–∞... üò¥ –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞?")
    except Exception as e:
        logger.error(f"Unexpected error handling message for user {user_id}: {e}", exc_info=True)
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üò¢ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–∂–µ?")