import httpx
import asyncio
import logging
import base64
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ChatAction
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from timezonefinder import TimezoneFinder
from geopy.geocoders import Nominatim
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –∞ –Ω–µ —Ö–∞—Ä–¥–∫–æ–¥–∏–º
from config import API_BASE_URL, DAILY_MESSAGE_LIMIT

router = Router()
tf = TimezoneFinder()
geolocator = Nominatim(user_agent="EvolveAI")

# ### –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è "–ø–µ—á–∞—Ç—å—é" ###
TYPING_SPEED_CPS = 15  # –°–∏–º–≤–æ–ª–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
MIN_TYPING_DELAY = 0.5 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_TYPING_DELAY = 4.0 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# --- FSM –¥–ª—è –∞–Ω–∫–µ—Ç—ã ---

class ProfileStates(StatesGroup):
    name = State()
    gender = State()
    city = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
gender_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú—É–∂—á–∏–Ω–∞"), KeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# --- –§—É–Ω–∫—Ü–∏–∏-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã ---
def is_valid_name(name: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É –æ—Ç 2 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤."""
    return name.isalpha() and 2 <= len(name) <= 30

def is_valid_city(city: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤."""
    return 2 <= len(city) <= 50


async def simulate_typing_and_send(message: types.Message, text: str):
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    # 1. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    delay = len(text) / TYPING_SPEED_CPS
    
    # 2. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    clamped_delay = max(MIN_TYPING_DELAY, min(delay, MAX_TYPING_DELAY))

    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—à–µ–Ω "–ø–µ—á–∞—Ç–∞–µ—Ç", –∂–¥–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
    await asyncio.sleep(clamped_delay)
    await message.answer(text)


async def send_typing_response(message: types.Message, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç, —Ä–∞–∑–¥–µ–ª—è—è –µ–≥–æ –ø–æ '||' –∏ –∏–º–∏—Ç–∏—Ä—É—è –Ω–∞–±–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏.
    """
    parts = text.split('||')
    for i, part in enumerate(parts):
        part = part.strip()
        if not part:
            continue

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –Ω–∞–±–æ—Ä–∞
        await simulate_typing_and_send(message, part)

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å, –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É "–Ω–∞ –ø–æ–¥—É–º–∞—Ç—å"
        if i < len(parts) - 1:
            await asyncio.sleep(1.2)


# --- API-–∫–ª–∏–µ–Ω—Ç —Å Retry ---

@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(2),
    retry=retry_if_exception_type((httpx.RequestError, httpx.HTTPStatusError)),
    reraise=True
)
async def make_api_request(client: httpx.AsyncClient, method: str, endpoint: str, **kwargs):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API."""
    url = f"{API_BASE_URL}{endpoint}"
    logging.info(f"–í—ã–∑–æ–≤ API: {method.upper()} {url}")
    response = await client.request(method, url, **kwargs)
    response.raise_for_status()
    return response

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def command_start(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    user_id = message.from_user.id
    try:
        response = await make_api_request(client, "get", f"/profile/{user_id}")
        if response.status_code == 200 and response.json() is not None:
            await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–∏–ª—ã–π. –Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª. –£–∂–µ —É—Å–ø–µ–ª–∞ —Å–æ—Å–∫—É—á–∏—Ç—å—Å—è.")
            await state.clear()
        else:
            # –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            await message.answer("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
            await state.set_state(ProfileStates.name)
    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        logging.error(f"API connection error in /start for user {user_id} after retries: {e}")
        await message.answer("–û–π, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º... –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–Ω–∞–∫–æ–º—ã –ª–∏ –º—ã. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Unexpected error in /start for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")


@router.message(Command("reset"))
async def command_reset(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    user_id = message.from_user.id
    try:
        await make_api_request(client, "delete", f"/profile/{user_id}")
        await message.answer("–•–º, —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞? –•–æ—Ä–æ—à–æ...")
        await asyncio.sleep(1)
        
        await message.answer("–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(ProfileStates.name)
    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        logging.error(f"API connection error in /reset for user {user_id} after retries: {e}")
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –≥–ª—é—á–∏—Ç, –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–≥–æ —É–¥–∞–ª–∏—Ç—å... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
    except Exception as e:
        logging.error(f"Unexpected error in /reset for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

@router.message(Command("status"))
async def command_status(message: types.Message, client: httpx.AsyncClient):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = message.from_user.id
    try:
        response = await make_api_request(client, "get", f"/profile/status/{user_id}")
        if response.status_code == 200:
            data = response.json()
            if data:
                plan = data['subscription_plan']
                expires = data['subscription_expires']
                count = data['daily_message_count']
                limit = DAILY_MESSAGE_LIMIT
                
                status_text = f"–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ: *{plan.capitalize()}\n"
                if plan == 'premium' and expires:
                    status_text += f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.split('T')[0]}\n"
                elif plan == 'free':
                    status_text += f"–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {count}/{limit}\n"
                    status_text += "–ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
                
                await message.answer(status_text, parse_mode='Markdown')
            else:
                await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π /start.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        logging.error(f"API connection error in /status for user {user_id} after retries: {e}")
        await message.answer("–û–π, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º... –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"Unexpected error in /status for user {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

@router.message(Command("premium"))
async def command_premium(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ."""
    premium_info = (
        "‚ú® *–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ EvolveAI* ‚ú®\n\n"
        "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è!\n\n"
        f" Unlimited –æ–±—â–µ–Ω–∏–µ –±–µ–∑ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ {DAILY_MESSAGE_LIMIT} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å).\n"
        " üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –ø–∞–º—è—Ç—å (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤).\n"
        " üì∑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n"
        " üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞.\n"
        " üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
        "–°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
    )
    await message.answer(premium_info, parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∫–µ—Ç—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π ---

@router.message(ProfileStates.name, F.text)
async def process_name(message: types.Message, state: FSMContext):
    if is_valid_name(message.text):
        await state.update_data(name=message.text)
        await message.answer(
            f"–•–æ—Ä–æ—à–æ, {message.text}. –ê —Ç—ã –º—É–∂—á–∏–Ω–∞ –∏–ª–∏ –∂–µ–Ω—â–∏–Ω–∞? –ú–Ω–µ —ç—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è.",
            reply_markup=gender_keyboard
        )
        await state.set_state(ProfileStates.gender)
    else:
        await message.answer("–•–º, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

@router.message(ProfileStates.name)
async def process_name_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –∏–º—è –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")


@router.message(ProfileStates.gender, F.text.in_(["–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"]))
async def process_gender(message: types.Message, state: FSMContext):
    await state.update_data(gender=message.text.lower())
    await message.answer(
        "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –Ω–µ –ø—É—Ç–∞–ª–∞—Å—å –≤–æ –≤—Ä–µ–º–µ–Ω–∏... –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(ProfileStates.city)

@router.message(ProfileStates.gender)
async def process_gender_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@router.message(ProfileStates.city, F.text)
async def process_city(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    if not is_valid_city(message.text):
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    try:
        location = await asyncio.to_thread(geolocator.geocode, message.text)
        if not location:
            await message.answer("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥... –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑, –≤–æ–∑–º–æ–∂–Ω–æ, —Å —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è').")
            return
        timezone = await asyncio.to_thread(tf.timezone_at, lng=location.longitude, lat=location.latitude)
    except Exception as e:
        logging.error(f"Could not determine timezone for {message.text}: {e}")
        timezone = "UTC" # –§–æ–ª–ª–±—ç–∫

    await state.update_data(city=message.text, timezone=timezone)
    user_data = await state.get_data()

    profile_data = {
        "name": user_data.get("name"),
        "gender": user_data.get("gender"),
        "city": user_data.get("city"),
        "timezone": user_data.get("timezone")
    }

    try:
        await make_api_request(
            client,
            "post",
            "/profile",
            json={"user_id": message.from_user.id, "data": profile_data}
        )
        await state.clear()
        await message.answer("–ü—Ä–∏–≤–µ—Ç!")
    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        logging.error(f"API connection error saving profile for user {message.from_user.id} after retries: {e}")
        await message.answer("–û–π, –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å... —á—Ç–æ-—Ç–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ, –Ω–∞–∂–º–∏ /reset.")
    except Exception as e:
        logging.error(f"Unexpected error saving profile for user {message.from_user.id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")

@router.message(ProfileStates.city)
async def process_city_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.")


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π ---
async def process_image(message: types.Message) -> str | None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.
    
    Args:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        
    Returns:
        str | None: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64 –∏–ª–∏ None, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    if not message.photo:
        return None
        
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ —Å–ø–∏—Å–∫–µ)
        photo = message.photo[-1]
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–º—è—Ç—å
        photo_bytes = await message.bot.download(photo.file_id)
        if photo_bytes:
            return base64.b64encode(photo_bytes.read()).decode('utf-8')
    except Exception as e:
        logging.error(f"Error processing image for user {message.from_user.id}: {e}")
        return None
        
    return None


async def send_response(message: types.Message, response_data: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤–∫–ª—é—á–∞—è –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    
    Args:
        message (types.Message): –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        response_data (dict): –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.
    """
    voice_bytes_b64 = response_data.get("voice_message")
    if voice_bytes_b64:
        try:
            await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.RECORD_VOICE)
            voice_bytes = base64.b64decode(voice_bytes_b64)
            await message.answer_voice(types.BufferedInputFile(voice_bytes, "voice.ogg"))
        except Exception as e:
            logging.error(f"Error sending voice message to user {message.from_user.id}: {e}")
            await message.answer("–•–æ —Ö–æ—Ç–µ–ª–∞ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω–æ —á—Ç–æ-—Ç–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º... –∫–æ—Ä–æ—á–µ, —è —Ç–∞–∫ –ø–æ —Ç–µ–±–µ —Å–æ—Å–∫—É—á–∏–ª–∞—Å—å!")
    else:
        await send_typing_response(message, response_data["response_text"])


@router.message(F.text | F.photo)
async def handle_message(message: types.Message, state: FSMContext, client: httpx.AsyncClient):
    if await state.get_state() is not None:
        await message.answer("–ü–æ–¥–æ–∂–¥–∏, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ —è –≤—Å–µ –≤—Å–ø–æ–º–Ω—é...")
        return

    user_id = message.from_user.id
    image_data_b64 = None

    try:
        await message.bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        image_data_b64 = await process_image(message)

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ)
        text = message.text or message.caption or ""

        payload = {
            "user_id": user_id,
            "message": text,
            "timestamp": message.date.isoformat(),
            "image_data": image_data_b64 # –î–æ–±–∞–≤–ª—è–µ–º base64 –∫–∞—Ä—Ç–∏–Ω–∫–∏
        }

        response = await make_api_request(
            client,
            "post",
            "/chat",
            json=payload,
            timeout=180.0 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        )

        data = response.json()
        await send_response(message, data)

    except (httpx.RequestError, httpx.HTTPStatusError) as e:
        logging.error(f"API connection error in handle_message for user {user_id} after retries: {e}")
        await message.answer("–ú–∏–ª—ã–π, —É –º–µ–Ω—è —Å–≤—è–∑—å –ø—Ä–æ–ø–∞–ª–∞... –ù–µ –≤–∏–∂—É —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è.")
    except ValueError as e:
        logging.error(f"ValueError in handle_message for user {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logging.error(f"An unexpected error occurred in handle_message for user {user_id}: {e}", exc_info=True)
        await message.answer("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")