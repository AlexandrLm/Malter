"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ —Å –ø–æ–º–æ—â—å—é APScheduler.

–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:
- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
- –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞
- –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫
"""

import logging
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

from server.database import cleanup_old_chat_history, check_all_subscriptions_expiry
from utils.cache import get_cache_stats, warm_up_cache

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π scheduler instance
scheduler = AsyncIOScheduler(timezone="UTC")


async def cleanup_old_messages_job():
    """
    –ó–∞–¥–∞—á–∞: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 3:00 UTC.
    """
    try:
        logger.info("üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        deleted_count = await cleanup_old_chat_history(days_to_keep=30)
        logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}", exc_info=True)


async def check_subscriptions_job():
    """
    –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å.
    """
    try:
        logger.info("üìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫...")
        expired_count = await check_all_subscriptions_expiry()
        if expired_count > 0:
            logger.info(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        else:
            logger.debug("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)


async def cache_metrics_job():
    """
    –ó–∞–¥–∞—á–∞: –°–±–æ—Ä –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.
    """
    try:
        stats = await get_cache_stats()
        if stats.get("status") == "active":
            logger.info(
                f"üìä Cache stats: "
                f"keys={stats.get('total_keys', 0)}, "
                f"hit_rate={stats.get('hit_rate', 0)}%, "
                f"memory={stats.get('used_memory_human', 'N/A')}"
            )
        elif stats.get("status") == "disabled":
            logger.debug("üìä Cache disabled")
        else:
            logger.warning(f"‚ö†Ô∏è Cache error: {stats.get('message', 'Unknown')}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞: {e}", exc_info=True)


async def warmup_cache_job():
    """
    –ó–∞–¥–∞—á–∞: –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        logger.info("üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞...")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ñ–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏ —Ç.–¥.
        
        async def preload_example():
            """–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞."""
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
            # from server.database import get_profile
            # for user_id in [1, 2, 3, 100, 200]:
            #     await get_profile(user_id)
            pass
        
        results = await warm_up_cache([preload_example])
        logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: {results}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥—Ä–µ–≤–µ –∫—ç—à–∞: {e}", exc_info=True)


def setup_scheduler():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ scheduler...")
    
    # 1. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ - —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 3:00 UTC
    scheduler.add_job(
        cleanup_old_messages_job,
        trigger=CronTrigger(hour=3, minute=0),
        id="cleanup_old_messages",
        name="–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        replace_existing=True,
        max_instances=1  # –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (3:00 UTC –µ–∂–µ–¥–Ω–µ–≤–Ω–æ)")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ - –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.add_job(
        check_subscriptions_job,
        trigger=IntervalTrigger(hours=1),
        id="check_subscriptions",
        name="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫",
        replace_existing=True,
        max_instances=1
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π —á–∞—Å)")
    
    # 3. –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞ - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    scheduler.add_job(
        cache_metrics_job,
        trigger=IntervalTrigger(minutes=5),
        id="cache_metrics",
        name="–ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞",
        replace_existing=True,
        max_instances=1
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)")
    
    # 4. –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ - –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (—á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞)
    scheduler.add_job(
        warmup_cache_job,
        trigger="date",  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞
        run_date=None,  # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ä–∞–∑—É
        id="warmup_cache",
        name="–ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞",
        replace_existing=True
    )
    logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞: –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ (–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)")
    
    logger.info("‚úÖ Scheduler –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")


def start_scheduler():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç scheduler.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ lifespan —Å–æ–±—ã—Ç–∏–∏ FastAPI.
    """
    try:
        setup_scheduler()
        scheduler.start()
        logger.info("üöÄ Scheduler –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ scheduler: {e}", exc_info=True)
        raise


def shutdown_scheduler():
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç scheduler gracefully.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    try:
        if scheduler.running:
            scheduler.shutdown(wait=True)
            logger.info("üõë Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ scheduler: {e}", exc_info=True)


def get_scheduler_status() -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å scheduler –∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.
    
    Returns:
        dict: –°—Ç–∞—Ç—É—Å scheduler –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–∞—Ö
    """
    try:
        jobs = scheduler.get_jobs()
        return {
            "status": "running" if scheduler.running else "stopped",
            "jobs": [
                {
                    "id": job.id,
                    "name": job.name,
                    "next_run": job.next_run_time.isoformat() if job.next_run_time else None,
                    "trigger": str(job.trigger)
                }
                for job in jobs
            ],
            "jobs_count": len(jobs)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ scheduler: {e}")
        return {"status": "error", "message": str(e)}


# –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API endpoint)
async def trigger_cleanup_now():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    await cleanup_old_messages_job()


async def trigger_subscription_check_now():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫."""
    await check_subscriptions_job()


async def trigger_cache_warmup_now():
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞."""
    await warmup_cache_job()
