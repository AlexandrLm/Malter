"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î.

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î
2. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
3. –®–∏—Ñ—Ä—É–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é ENCRYPTION_KEY
4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ë–î

–í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ENCRYPTION_KEY!
–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –¥–≤–æ–π–Ω–æ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é –∏ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö!

Usage:
    python scripts/encrypt_existing_data.py
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent.parent))

from sqlalchemy import select
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from server.models import UserProfile
from utils.encryption import encrypt_field, is_encryption_enabled
from config import DATABASE_URL
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def encrypt_existing_profiles():
    """
    –®–∏—Ñ—Ä—É–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    if not is_encryption_enabled():
        logger.error("‚ùå ENCRYPTION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        return False
    
    logger.info("üîê –ù–∞—á–∞–ª–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    engine = create_async_engine(DATABASE_URL)
    async_session = async_sessionmaker(engine)
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
            result = await session.execute(select(UserProfile))
            profiles = result.scalars().all()
            
            if not profiles:
                logger.info("‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
                return True
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            encrypted_count = 0
            skipped_count = 0
            error_count = 0
            
            for profile in profiles:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å
                    # –ï—Å–ª–∏ _encrypted_name —É–∂–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ encrypted (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å gAAAAA), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    raw_name = profile._encrypted_name
                    
                    if raw_name and raw_name.startswith('gAAAAA'):
                        # –£–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (Fernet —Ç–æ–∫–µ–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å gAAAAA –≤ base64)
                        logger.debug(f"‚è≠Ô∏è  User {profile.user_id}: —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        skipped_count += 1
                        continue
                    
                    if not raw_name:
                        # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
                        skipped_count += 1
                        continue
                    
                    # –®–∏—Ñ—Ä—É–µ–º plaintext –¥–∞–Ω–Ω—ã–µ
                    logger.info(f"üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user {profile.user_id}")
                    profile._encrypted_name = encrypt_field(raw_name)
                    encrypted_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ user {profile.user_id}: {e}")
                    error_count += 1
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if encrypted_count > 0:
                await session.commit()
                logger.info(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(profiles)}")
            logger.info(f"   –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted_count}")
            logger.info(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
            logger.info(f"   –û—à–∏–±–æ–∫: {error_count}")
            
            if error_count > 0:
                logger.warning(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
                return False
            
            logger.info(f"‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False
    finally:
        await engine.dispose()


async def verify_encryption():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    """
    logger.info("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...")
    
    engine = create_async_engine(DATABASE_URL)
    async_session = async_sessionmaker(engine)
    
    try:
        async with async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            result = await session.execute(select(UserProfile).limit(5))
            profiles = result.scalars().all()
            
            if not profiles:
                logger.info("‚úÖ –ù–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return True
            
            all_ok = True
            for profile in profiles:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ name —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    decrypted_name = profile.name
                    encrypted_raw = profile._encrypted_name
                    
                    logger.info(f"User {profile.user_id}:")
                    logger.info(f"  –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted_raw[:50]}..." if encrypted_raw else "  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                    logger.info(f"  –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted_name}")
                    
                    if encrypted_raw and not encrypted_raw.startswith('gAAAAA'):
                        logger.warning(f"‚ö†Ô∏è  User {profile.user_id}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ!")
                        all_ok = False
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ user {profile.user_id}: {e}")
                    all_ok = False
            
            if all_ok:
                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")
            
            return all_ok
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", exc_info=True)
        return False
    finally:
        await engine.dispose()


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è.
    """
    import sys
    
    logger.info("=" * 70)
    logger.info("üîê –°–∫—Ä–∏–ø—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    logger.info("=" * 70)
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    logger.warning("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï:")
    logger.warning("   –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏–∑–º–µ–Ω–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î!")
    logger.warning("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å backup –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    logger.warning("   –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥–≤–æ–π–Ω–æ–º—É —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—é!\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ --force
    if '--force' not in sys.argv:
        try:
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
            if response.lower() != 'yes':
                logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return
        except EOFError:
            logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --force")
            return
    else:
        logger.info("‚úÖ –ó–∞–ø—É—Å–∫ —Å —Ñ–ª–∞–≥–æ–º --force, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ENCRYPTION_KEY
    if not is_encryption_enabled():
        logger.error("\n‚ùå ENCRYPTION_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.error("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ:")
        logger.error("   python -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\"")
        return
    
    # –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    success = await encrypt_existing_profiles()
    
    if not success:
        logger.error("\n‚ùå –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    verification_ok = await verify_encryption()
    
    if verification_ok:
        logger.info("\n" + "=" * 70)
        logger.info("‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("=" * 70)
    else:
        logger.error("\n" + "=" * 70)
        logger.error("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
        logger.error("=" * 70)


if __name__ == "__main__":
    asyncio.run(main())
